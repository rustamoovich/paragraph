import os
import logging
from datetime import timedelta

import requests
from django.contrib.auth import authenticate, login, get_user_model
from django.http import JsonResponse, HttpRequest, HttpResponseBadRequest, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
from django.shortcuts import render, redirect

from .models import OTPLoginSession, UserProfile


logger = logging.getLogger(__name__)
User = get_user_model()


# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _get_client_meta - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞


def send_telegram_code(telegram_id: str, code: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram API (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN is not configured")
        return False
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –±–æ—Ç–µ
        message_text = (
            f"üîë –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞\n\n"
            f"–ö–æ–¥: `{code}`\n\n"
            f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 –º–∏–Ω—É—Ç—É\n"
            f"üåê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ: paragraph.uz"
        )
        resp = requests.post(url, json={
            "chat_id": telegram_id, 
            "text": message_text, 
            "parse_mode": "Markdown"
        }, timeout=10)
        if resp.status_code == 200:
            return True
        logger.warning("Telegram send failed: %s %s", resp.status_code, resp.text)
        return False
    except requests.RequestException as exc:
        logger.exception("Telegram send error: %s", exc)
        return False


@csrf_exempt
def request_code(request: HttpRequest):
    if request.method != "POST":
        return HttpResponseBadRequest("POST only")

    identifier = (request.POST.get("username") or request.POST.get("email") or request.POST.get("phone") or "").strip()
    if not identifier:
        return HttpResponseBadRequest("username/email/phone required")

    user = (
        User.objects.filter(username=identifier).first()
        or User.objects.filter(email=identifier).first()
        or User.objects.filter(profile__phone_number=identifier).first()
    )
    if not user:
        return JsonResponse({"ok": False, "error": "user_not_found"}, status=404)

    profile = getattr(user, "profile", None)
    if not profile or not profile.telegram_id:
        return JsonResponse({"ok": False, "error": "telegram_not_linked"}, status=400)

    session = OTPLoginSession.create_for_user(user, ttl_seconds=60)

    if not send_telegram_code(profile.telegram_id, session.code):
        session.delete()
        return JsonResponse({"ok": False, "error": "send_failed"}, status=502)

    return JsonResponse({"ok": True, "ttl": 60})


@csrf_exempt
def verify_code(request: HttpRequest):
    if request.method != "POST":
        return HttpResponseBadRequest("POST only")

    user_code = (request.POST.get("code") or "").strip()
    if not user_code or len(user_code) != 6 or not user_code.isdigit():
        return JsonResponse({"ok": False, "error": "invalid_code_format"}, status=400)

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    now = timezone.now()
    logger.info(f"üîç –ò—â–µ–º –∫–æ–¥: '{user_code}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å –Ω—É–∂–Ω—ã–º –∫–æ–¥–æ–º (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        sessions_with_code = list(OTPLoginSession.objects.filter(code=user_code).order_by("-created_at"))
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π —Å –∫–æ–¥–æ–º '{user_code}': {len(sessions_with_code)}")
        
        # –ï—Å–ª–∏ –∫–æ–¥ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
        if not sessions_with_code:
            logger.warning(f"‚ùå –ö–æ–¥ '{user_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return JsonResponse({
                "ok": False, 
                "error": "invalid_code"
            }, status=400)
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∏ –Ω–µ –∏—Å—Ç–µ–∫—à—É—é)
        active_session = None
        expired_session = None
        
        for session in sessions_with_code:
            if not session.is_verified:  # –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è
                if session.expires_at >= now:  # –ù–µ –∏—Å—Ç–µ–∫—à–∞—è
                    active_session = session
                    break
                else:  # –ò—Å—Ç–µ–∫—à–∞—è
                    expired_session = session
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        for session in sessions_with_code:
            if session.is_verified:
                status = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            elif session.expires_at < now:
                status = "–ò—Å—Ç–µ–∫"
            else:
                status = "–ê–∫—Ç–∏–≤–µ–Ω"
            logger.info(f"   - ID: {session.id}, –ö–æ–¥: '{session.code}', –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session.user.username}, –°—Ç–∞—Ç—É—Å: {status}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if active_session:
            session = active_session
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        elif expired_session:
            logger.warning(f"‚è∞ –ö–æ–¥ '{user_code}' –∏—Å—Ç–µ–∫")
            return JsonResponse({
                "ok": False, 
                "error": "code_expired"
            }, status=400)
        # –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
        else:
            logger.warning(f"‚ùå –ö–æ–¥ '{user_code}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return JsonResponse({
                "ok": False, 
                "error": "invalid_code"
            }, status=400)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Å—Å–∏–∏: {str(e)}")
        return JsonResponse({
            "ok": False, 
            "error": "database_error"
        }, status=500)

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è ID: {session.id}, –ö–æ–¥ –≤ –ë–î: '{session.code}', –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {session.user.username}")
    logger.info(f"üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: '{user_code}' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) == '{session.code}' (–±–∞–∑–∞)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if session.code != user_code:
        logger.warning(f"‚ùå –ö–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return JsonResponse({
            "ok": False, 
            "error": "invalid_code"
        }, status=400)

    # –ö–æ–¥ —Å–æ–≤–ø–∞–ª - –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    session.is_verified = True
    session.save(update_fields=["is_verified"])
    logger.info(f"‚úÖ –ö–æ–¥—ã —Å–æ–≤–ø–∞–ª–∏! –°–µ—Å—Å–∏—è {session.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")

    # –õ–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
    user = session.user
    user.backend = "django.contrib.auth.backends.ModelBackend"
    login(request, user)

    logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É!")

    return JsonResponse({
        "ok": True, 
        "user": user.username
    })


def login_page(request: HttpRequest) -> HttpResponse:
    if request.user.is_authenticated:
        return redirect("/")
    return render(request, "users/login.html")




def dashboard(request: HttpRequest) -> HttpResponse:
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not request.user.is_authenticated:
        return redirect("/users/login/")
    
    return render(request, "users/dashboard.html")


def debug_codes(request: HttpRequest) -> HttpResponse:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
    now = timezone.now()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ (–≤–∫–ª—é—á–∞—è –∏—Å—Ç–µ–∫—à–∏–µ) - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        all_sessions = list(OTPLoginSession.objects.all().order_by("-created_at")[:20])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Python (–∏–∑–±–µ–≥–∞–µ–º —Å–ª–æ–∂–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤)
        active_sessions = [
            session for session in all_sessions 
            if not session.is_verified and session.expires_at >= now
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        active_count = len(active_sessions)
        total_count = len(all_sessions)
        
        context = {
            'active_sessions': active_sessions,
            'all_sessions': all_sessions,
            'current_time': now,
            'active_count': active_count,
            'total_count': total_count
        }
        
        return render(request, "users/debug_codes.html", context)
        
    except Exception as e:
        logger.error(f"Error in debug_codes: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
        context = {
            'active_sessions': [],
            'all_sessions': [],
            'current_time': now,
            'active_count': 0,
            'total_count': 0,
            'error': str(e)
        }
        return render(request, "users/debug_codes.html", context)




def logout_view(request: HttpRequest) -> HttpResponse:
    from django.contrib.auth import logout
    logout(request)
    return redirect("/")
